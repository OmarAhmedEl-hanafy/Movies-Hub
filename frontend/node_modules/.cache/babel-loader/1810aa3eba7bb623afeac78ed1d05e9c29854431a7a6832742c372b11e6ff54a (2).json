{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Footer from \"./Footer\";\nimport axios from \"axios\";\nimport Post from \"./Post\";\nimport \"./Community.css\";\nimport CommentForm from \"./CommentForm\";\nfunction Community() {\n  _s();\n  const [showCommentForm, setShowCommentForm] = useState(false);\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(\"http://127.0.0.1:8000/api/posts/\");\n        const promises = response.data.map(post => axios.get(`http://127.0.0.1:8000/api/posts/${post.id}/comments/`));\n        const commentResponses = await Promise.all(promises);\n        const postsWithComments = response.data.map((post, index) => ({\n          ...post,\n          comments: commentResponses[index].data\n        }));\n        setPosts(postsWithComments);\n        console.log(postsWithComments);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handlePostCreated = post => {\n    setPosts([...posts, post]);\n  };\n  const handleCommentCreated = (postId, comment) => {\n    const updatedPosts = posts.map(post => {\n      if (post.id === postId) {\n        return {\n          ...post,\n          comments: [...post.comments, comment]\n        };\n      } else {\n        return post;\n      }\n    });\n    setPosts(updatedPosts);\n  };\n\n  // return (\n  //   <>\n  //     <Navbar />\n  //     <>\n  //       <Post onPostCreated={handlePostCreated} />\n  //       <div className=\"post_content\">\n\n  //         {posts.map((post) => (\n  //           <>\n  //             <div key={post.id}>\n  //               <h3>Author: {post.user.name}</h3>\n  //               <h2>{post.title}</h2>\n  //               <p>{post.content}</p>\n  //             </div>\n  //             <div>\n  //            {showCommentForm === post.id && (\n  //                               <CommentForm\n  //                                   postId={post.id}\n  //                                   onSubmit={(comment) =>\n  //                                     handleCommentCreated(post.id, comment)\n  //                                   }\n  //                               />\n  //                           )}\n  //           </div>\n  //           <div>\n  //           <ul className=\"com\">\n  //                                   <li>\n  //                                       <button\n  //                                           onClick={() => setShowCommentForm(post.id)}\n  //                                           className=\"com\"\n  //                                       >\n  //                                           <i className=\"fas fa-comment-alt comment\"></i> Add Comment\n  //                                       </button>\n  //                                   </li>\n  //                                   {post.comments?.map((comment) => (\n  //                                       <div key={comment.id}>\n  //                                           {comment.user && <h5> Commenter: {comment.user?.name}</h5>}\n  //                                           <li>{comment.content}</li>\n  //                                       </div>\n  //                                   ))}\n  //                               </ul>\n  //           </div>\n  //           <hr/>\n  //           </>\n  //         ))}\n  //       </div>\n  //     </>\n  //     <Footer />\n  //   </>\n  // );\n}\n_s(Community, \"9F/XlBce7oKFiq1g4TFzN+30ig0=\");\n_c = Community;\nexport default Community;\nvar _c;\n$RefreshReg$(_c, \"Community\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","Footer","axios","Post","CommentForm","Community","_s","showCommentForm","setShowCommentForm","posts","setPosts","fetchData","response","get","promises","data","map","post","id","commentResponses","Promise","all","postsWithComments","index","comments","console","log","error","handlePostCreated","handleCommentCreated","postId","comment","updatedPosts","_c","$RefreshReg$"],"sources":["E:/♦Collage♦/♦Lv 2♦/Backend Project/Backend Project/frontend/src/components/Community.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport Footer from \"./Footer\";\r\nimport axios from \"axios\";\r\nimport Post from \"./Post\";\r\nimport \"./Community.css\";\r\nimport CommentForm from \"./CommentForm\";\r\n\r\nfunction Community() {\r\n  const [showCommentForm, setShowCommentForm] = useState(false);\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n        try {\r\n            const response = await axios.get(\"http://127.0.0.1:8000/api/posts/\");\r\n            const promises = response.data.map((post) =>\r\n            axios.get(`http://127.0.0.1:8000/api/posts/${post.id}/comments/`)\r\n            );\r\n            const commentResponses = await Promise.all(promises);\r\n            const postsWithComments = response.data.map((post, index) => ({\r\n                ...post,\r\n                comments: commentResponses[index].data,\r\n            }));\r\n            setPosts(postsWithComments);\r\n            console.log(postsWithComments)\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n    fetchData();\r\n}, []);\r\n\r\n  const handlePostCreated = (post) => {\r\n    setPosts([...posts, post]);\r\n  };\r\n\r\n  const handleCommentCreated = (postId, comment) => {\r\n    const updatedPosts = posts.map((post) => {\r\n        if (post.id === postId) {\r\n            return {\r\n                ...post,\r\n                comments: [...post.comments, comment],\r\n            };\r\n        } else {\r\n            return post;\r\n        }\r\n    });\r\n    setPosts(updatedPosts);\r\n  }\r\n\r\n  \r\n\r\n  // return (\r\n  //   <>\r\n  //     <Navbar />\r\n  //     <>\r\n  //       <Post onPostCreated={handlePostCreated} />\r\n  //       <div className=\"post_content\">\r\n\r\n  //         {posts.map((post) => (\r\n  //           <>\r\n  //             <div key={post.id}>\r\n  //               <h3>Author: {post.user.name}</h3>\r\n  //               <h2>{post.title}</h2>\r\n  //               <p>{post.content}</p>\r\n  //             </div>\r\n  //             <div>\r\n  //            {showCommentForm === post.id && (\r\n  //                               <CommentForm\r\n  //                                   postId={post.id}\r\n  //                                   onSubmit={(comment) =>\r\n  //                                     handleCommentCreated(post.id, comment)\r\n  //                                   }\r\n  //                               />\r\n  //                           )}\r\n  //           </div>\r\n  //           <div>\r\n  //           <ul className=\"com\">\r\n  //                                   <li>\r\n  //                                       <button\r\n  //                                           onClick={() => setShowCommentForm(post.id)}\r\n  //                                           className=\"com\"\r\n  //                                       >\r\n  //                                           <i className=\"fas fa-comment-alt comment\"></i> Add Comment\r\n  //                                       </button>\r\n  //                                   </li>\r\n  //                                   {post.comments?.map((comment) => (\r\n  //                                       <div key={comment.id}>\r\n  //                                           {comment.user && <h5> Commenter: {comment.user?.name}</h5>}\r\n  //                                           <li>{comment.content}</li>\r\n  //                                       </div>\r\n  //                                   ))}\r\n  //                               </ul>\r\n  //           </div>\r\n  //           <hr/>\r\n  //           </>\r\n  //         ))}\r\n  //       </div>\r\n  //     </>\r\n  //     <Footer />\r\n  //   </>\r\n  // );\r\n}\r\n\r\nexport default Community;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,iBAAiB;AACxB,OAAOC,WAAW,MAAM,eAAe;AAEvC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,kCAAkC,CAAC;QACpE,MAAMC,QAAQ,GAAGF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAEC,IAAI,IACxCf,KAAK,CAACW,GAAG,CAAE,mCAAkCI,IAAI,CAACC,EAAG,YAAW,CAAC,CAChE;QACD,MAAMC,gBAAgB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;QACpD,MAAMQ,iBAAiB,GAAGV,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEM,KAAK,MAAM;UAC1D,GAAGN,IAAI;UACPO,QAAQ,EAAEL,gBAAgB,CAACI,KAAK,CAAC,CAACR;QACtC,CAAC,CAAC,CAAC;QACHL,QAAQ,CAACY,iBAAiB,CAAC;QAC3BG,OAAO,CAACC,GAAG,CAACJ,iBAAiB,CAAC;MAClC,CAAC,CAAC,OAAOK,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;MACxB;IACJ,CAAC;IACDhB,SAAS,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;EAEJ,MAAMiB,iBAAiB,GAAIX,IAAI,IAAK;IAClCP,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEQ,IAAI,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMY,oBAAoB,GAAGA,CAACC,MAAM,EAAEC,OAAO,KAAK;IAChD,MAAMC,YAAY,GAAGvB,KAAK,CAACO,GAAG,CAAEC,IAAI,IAAK;MACrC,IAAIA,IAAI,CAACC,EAAE,KAAKY,MAAM,EAAE;QACpB,OAAO;UACH,GAAGb,IAAI;UACPO,QAAQ,EAAE,CAAC,GAAGP,IAAI,CAACO,QAAQ,EAAEO,OAAO;QACxC,CAAC;MACL,CAAC,MAAM;QACH,OAAOd,IAAI;MACf;IACJ,CAAC,CAAC;IACFP,QAAQ,CAACsB,YAAY,CAAC;EACxB,CAAC;;EAID;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAAC1B,EAAA,CA/FQD,SAAS;AAAA4B,EAAA,GAAT5B,SAAS;AAiGlB,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}